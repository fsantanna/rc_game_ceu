#include "sdl/sdl.ceu"
#include "c.ceu"

code/tight Collision (var SDL_Rect r1, var SDL_Rect r2) -> bool
do
  if r1.x+r1.w < r2.x then
    escape false;
  end
  if r1.y+r1.h < r2.y then
    escape false;
  end
  if r2.x+r2.w < r1.x then
    escape false;
  end
  if r2.y+ r2.h < r1.y then
    escape false;
  end
  escape true;
end

code/await Ship (var& _SDL_Renderer ren, var int x, var int y) -> (var SDL_Rect rect, var int velx, var int vely, event bool collided) -> void do
  var& SDL_Open_Image img = spawn SDL_Open_Image(&ren, "logo-ship.png");
  var& SDL_Open_Image green_overlay = spawn SDL_Open_Image(&ren, "logo-green-overlay.png");
  var& SDL_Open_Image red_overlay = spawn SDL_Open_Image(&ren, "logo-red-overlay.png");
  rect = val SDL_Rect(x, y, img.tex.width, img.tex.height);
  var bool is_green = true;
  var bool recently_collided = false;
  var bool right_is_down = false;
  var bool left_is_down = false;
  var bool up_is_down = false;
  var bool down_is_down = false;
  velx = 0;
  vely = 0;

  par do
    var _SDL_KeyboardEvent&& key;
    every key in SDL_KEYDOWN do
      if key:keysym.sym == _SDLK_RIGHT then
        right_is_down = true;
      end
      if key:keysym.sym == _SDLK_LEFT then
        left_is_down = true;
      end
      if key:keysym.sym == _SDLK_UP then
        up_is_down = true;
      end
      if key:keysym.sym == _SDLK_DOWN then
        down_is_down = true;
      end
    end

  with
    var _SDL_KeyboardEvent&& key;
    every key in SDL_KEYUP do
      if key:keysym.sym == _SDLK_RIGHT then
        right_is_down = false;
      end
      if key:keysym.sym == _SDLK_LEFT then
        left_is_down = false;
      end
      if key:keysym.sym == _SDLK_UP then
        up_is_down = false;
      end
      if key:keysym.sym == _SDLK_DOWN then
        down_is_down = false;
      end
    end

  with
    every 50ms do
      if right_is_down then
        velx = velx + 1;
      end
      if left_is_down then
        velx = velx - 1;
      end
      if up_is_down then
        vely = vely - 1;
      end
      if down_is_down then
        vely = vely + 1;
      end

      var int new_x = rect.x + velx;
      var int new_y = rect.y + vely;

      if new_x < 0 then
        new_x = 0;
      end
      if new_x > 800-rect.w then
        new_x = 800-rect.w;
      end
      if new_y < 0 then
        new_y = 0;
      end
      if new_y > 480-rect.h then
        new_y = 480-rect.h;
      end

      velx = new_x - rect.x;
      vely = new_y - rect.y;

      rect.x = new_x;
      rect.y = new_y;

    end
  with
    every SDL_REDRAW do
      _SDL_RenderCopy(&&ren, &&img.tex.tex, null, &&rect as _SDL_Rect&&);
      if recently_collided then
        if is_green then
          _SDL_RenderCopy(&&ren, &&green_overlay.tex.tex, null, &&rect as _SDL_Rect&&);
        else
          _SDL_RenderCopy(&&ren, &&red_overlay.tex.tex, null, &&rect as _SDL_Rect&&);
        end
      end
    end
  with
    loop do
      if recently_collided then
        //
      else
        is_green = await collided;
        recently_collided = true;
      end
      par/or do
        is_green = await collided;
        recently_collided = true;
      with
        await 1s;
        recently_collided = false;
      end
    end
  end
end

code/await Green (var& _SDL_Renderer ren, var SDL_Rect rect) -> (var SDL_Rect rct, event void collided) -> void do
  rct = val SDL_Rect(rect.x, rect.y, _rand() % 2 * 40 + 40, 40);
  var int speed = _rand() % 4 + 4;

  par/or do
    await collided;
  with
    every 50ms do
      rct.x = rct.x - speed;
      if rct.x < -40 then
        break;
      end
    end
  with
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(&&ren, 0x99,0xFF,0x99,0xFF);
        _SDL_RenderFillRect(&&ren, (&&rct as _SDL_Rect&&));
    end
  end
end

code/await Red (var& _SDL_Renderer ren, var SDL_Rect rect) -> (var SDL_Rect rct, event void collided) -> void do
  rct = val SDL_Rect(rect.x, rect.y, _rand() % 2 * 40 + 40, 40);
  var int speed = _rand() % 4 + 4;

  par/or do
    await collided;
  with
    every 50ms do
      rct.x = rct.x - speed;
      if rct.x < -40 then
        break;
      end
    end
  with
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(&&ren, 0xFF,0x99,0x99,0xFF);
        _SDL_RenderFillRect(&&ren, (&&rct as _SDL_Rect&&));
    end
  end
end

code/await Particle (var& _SDL_Renderer ren, var SDL_Rect rect, var int ship_velx, var int ship_vely, var SDL_Color c) -> void do
  var int velx = _rand() % 6 - 3 + ship_velx;
  var int vely = _rand() % 6 - 3 + ship_vely;

  par/or do
    every 250ms do
      if rect.w > 1 then
        rect.w = rect.w - 1;
        rect.h = rect.h - 1;
      else
        break;
      end
    end
  with
    every 50ms do
      if rect.x > 0 and rect.x < 800 and rect.y > 0 and rect.y < 480 then
        rect.x = rect.x + velx;
        rect.y = rect.y + vely;
      else
        break;
      end
    end
  with
    every SDL_REDRAW do
      _SDL_SetRenderDrawColor(&&ren, c.r, c.g, c.b, c.a);
      _SDL_RenderFillRect(&&ren, (&&rect as _SDL_Rect&&));
    end
  end
end

code/await Score (var& _SDL_Renderer ren) -> (event void collided_green, event void collided_red) -> void do
  var& SDL_Open_Image circles_img = spawn SDL_Open_Image(&ren, "little_circles.png");
  var SDL_Rect gray_circle = val SDL_Rect(0,0,10,10);
  var SDL_Rect green_circle = val SDL_Rect(10,0,10,10);
  var SDL_Rect red_circle = val SDL_Rect(20,0,10,10);
  var int recentgreens = 0;
  var int recentreds = 0;

  par do
    every collided_green do
      recentgreens = recentgreens + 1;
    end
  with
    every collided_red do
      recentreds = recentreds + 1;
    end
  with
    await 10s;
    every 1s do
      if recentgreens > 0 then
        recentgreens = recentgreens - 1;
      else/if recentreds > 0 then
        recentreds = recentreds - 1;
      else
        break;
      end
    end
  with
    every SDL_REDRAW do
      var int i;
      loop i in [0->10[ do
        var SDL_Rect placement_circle = val SDL_Rect(200 + i*14, 50, 10,10);
        if i < recentgreens then
          _SDL_RenderCopy(&&ren, &&circles_img.tex.tex, &&green_circle as _SDL_Rect&&, &&placement_circle as _SDL_Rect&&);
        else/if i < recentgreens + recentreds then
          _SDL_RenderCopy(&&ren, &&circles_img.tex.tex, &&red_circle as _SDL_Rect&&, &&placement_circle as _SDL_Rect&&);
        else
          _SDL_RenderCopy(&&ren, &&circles_img.tex.tex, &&gray_circle as _SDL_Rect&&, &&placement_circle as _SDL_Rect&&);
        end
      end
    end
  end
end

var&? SDL_Init sdl =
    spawn SDL_Init("Red/Green Recurse/Center", 800,480, SDL_Color(0xFF,0xFF,0xFF,0xFF));

watching sdl do
  var& SDL_Open_Image splash_screen = spawn SDL_Open_Image(&sdl.ren, "splash.png");
  var& SDL_Open_Image lose_screen = spawn SDL_Open_Image(&sdl.ren, "lose.png");
  var& SDL_Open_Sound red_sound = spawn SDL_Open_Sound("tele_tonedown.wav");
  var& SDL_Open_Sound green_sound = spawn SDL_Open_Sound("tele_toneup.wav");

  loop do

    // show splash screen
    par/or do
      await SDL_KEYDOWN;
    with
      every SDL_REDRAW do
        _SDL_RenderCopy(&&sdl.ren, &&splash_screen.tex.tex, null, null);
      end
    end

    var&? Score score = spawn Score(&sdl.ren);

    watching score do
      pool[20] Green gs;
      pool[20] Red rs;

      par do
        every 40ms do
          spawn Green(&sdl.ren, SDL_Rect((_rand() % 800) + 800, _rand() % 480, 40,40)) in gs;
          spawn Red(&sdl.ren, SDL_Rect((_rand() % 800) + 800, _rand() % 480, 40,40)) in rs;
        end

      with
        var&? Ship ship = spawn Ship(&sdl.ren, 100, 100);
        watching ship do
          pool[] Particle ps;
          every SDL_DT do
            var&? Green green;
            loop green in gs do
              if (call Collision(ship.rect, green!.rct)) then
                emit green!.collided;
                emit ship.collided(true);
                emit score.collided_green;
                _Mix_PlayChannel(-1, &&green_sound.sound, 0);
                var int i;
                var int num_particles = _rand() % 25 + 10;
                loop i in [0->num_particles[ do
                  var int sq = _rand() % 10 + 8;
                  spawn Particle(&sdl.ren, SDL_Rect(green!.rct.x+green!.rct.w/2, green!.rct.y+green!.rct.h/2, sq, sq), ship.velx, ship.vely, SDL_Color(0x99, 0xFF, 0x99, 0xFF)) in ps;
                end
              end
            end
            var&? Red red;
            loop red in rs do
              if (call Collision(ship.rect, red!.rct)) then
                emit red!.collided;
                emit ship.collided(false);
                emit score.collided_red;
                _Mix_PlayChannel(-1, &&red_sound.sound, 0);
                var int i;
                var int num_particles = _rand() % 25 + 10;
                loop i in [0->num_particles[ do
                  var int sq = _rand() % 10 + 8;
                  spawn Particle(&sdl.ren, SDL_Rect(red!.rct.x+red!.rct.w/2, red!.rct.y+red!.rct.h/2, sq, sq), ship.velx, ship.vely, SDL_Color(0xFF, 0x99, 0x99, 0xFF)) in ps;
                end
              end
            end
          end
        end
      end
    end

    // show lose screen
    par/or do
      await 1s;
      await SDL_KEYDOWN;
    with
      every SDL_REDRAW do
        _SDL_RenderCopy(&&sdl.ren, &&lose_screen.tex.tex, null, null);
      end
    end

  end   // loop
end  // watching sdl

escape 0;
